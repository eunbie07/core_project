version: '3.8'

services:
  mongo:
    image: mongo:6
    container_name: mongo
    restart: always
    volumes:
      - mongo-data:/data/db

  fastapi-backend:
    build: ./fastapi-backend
    container_name: fastapi-backend
    ports:
      - "3000:3000"
    env_file:
      - ./fastapi-backend/.env
    depends_on:
      - mongo
    restart: always
    volumes:
      # 호스트의 './fastapi-backend' 디렉토리를 컨테이너의 '/app'으로 마운트합니다.
      # Dockerfile의 WORKDIR이 /app이라면 이대로 사용하세요.
      - ./fastapi-backend:/app
      # venv 캐싱을 위한 익명 볼륨. 필요하다면 사용하세요.
      # 이 볼륨은 컨테이너의 /app/venv에 호스트의 파일이 덮어쓰이지 않도록 합니다.
      - /app/.venv # 파일 트리에 .venv 폴더가 보이므로, 이것으로 수정
    # FastAPI 애플리케이션의 엔트리 포인트가 main.py이고, 그 안에 `app` 인스턴스가 있다면
    # Dockerfile의 CMD 명령어는 다음과 같아야 합니다.
    # 예시: CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "3000", "--reload"]


  node-backend:
    build: ./node-backend
    container_name: node-backend
    ports:
      - "8000:8000"
    depends_on:
      - fastapi-backend
    restart: always
    volumes:
      # 호스트의 './node-backend' 디렉토리를 컨테이너의 '/app'으로 마운트합니다.
      # Dockerfile의 WORKDIR이 /app이라면 이대로 사용하세요.
      - ./node-backend:/app
      # node_modules 캐싱을 위한 익명 볼륨.
      # 이 볼륨은 컨테이너의 /app/node_modules에 호스트의 파일이 덮어쓰이지 않도록 합니다.
      - /app/node_modules
    # Node.js 애플리케이션의 메인 파일이 app.js라면,
    # Dockerfile의 CMD 명령어는 다음과 같아야 합니다.
    # 예시: CMD ["nodemon", "app.js"] 또는 package.json에 "dev" 스크립트가 있다면 "npm", "run", "dev"


  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - node-backend
    restart: always

volumes:
  mongo-data: